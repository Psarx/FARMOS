{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Fisat\\\\FARMOS\\\\frontend\\\\src\\\\components\\\\Assets\\\\Signup\\\\CropPrediction.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CropPrediction = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    nitrogen: '',\n    phosphorus: '',\n    potassium: '',\n    temperature: '',\n    humidity: '',\n    ph: '',\n    rainfall: '',\n    location: ''\n  });\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log('Submitted Data:', formData);\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const result = await response.json();\n      if (response.ok) {\n        setPrediction(result);\n        console.log('Prediction Result:', result);\n      } else {\n        setError(result.message || 'Error predicting crop');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setError('Failed to fetch prediction');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.header,\n      children: \"Crop Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      style: styles.form,\n      onSubmit: handleSubmit,\n      children: [Object.keys(formData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: key,\n          children: [key.charAt(0).toUpperCase() + key.slice(1), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: key,\n          name: key,\n          value: formData[key],\n          onChange: handleChange,\n          style: styles.input,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.submitButton,\n        children: \"Predict Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.result,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predicted Crop:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: prediction.crop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.error,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(CropPrediction, \"CpFV1YC1jBmypJKi1nG+OT6erbA=\");\n_c = CropPrediction;\nconst styles = {\n  container: {\n    padding: '20px',\n    maxWidth: '500px',\n    margin: 'auto'\n  },\n  header: {\n    textAlign: 'center'\n  },\n  form: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  inputGroup: {\n    marginBottom: '10px'\n  },\n  label: {\n    fontWeight: 'bold'\n  },\n  input: {\n    width: '100%',\n    padding: '8px',\n    marginTop: '5px'\n  },\n  submitButton: {\n    padding: '10px',\n    backgroundColor: '#28a745',\n    color: '#fff',\n    border: 'none',\n    cursor: 'pointer'\n  },\n  result: {\n    marginTop: '20px',\n    padding: '10px',\n    backgroundColor: '#e3fcef',\n    textAlign: 'center'\n  },\n  error: {\n    marginTop: '20px',\n    padding: '10px',\n    backgroundColor: '#f8d7da',\n    textAlign: 'center',\n    color: '#721c24'\n  }\n};\nexport default CropPrediction;\nvar _c;\n$RefreshReg$(_c, \"CropPrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CropPrediction","_s","formData","setFormData","nitrogen","phosphorus","potassium","temperature","humidity","ph","rainfall","location","prediction","setPrediction","error","setError","handleChange","e","target","name","value","handleSubmit","preventDefault","console","log","response","fetch","method","headers","body","JSON","stringify","result","json","ok","message","style","styles","container","children","header","fileName","_jsxFileName","lineNumber","columnNumber","form","onSubmit","Object","keys","map","key","inputGroup","label","htmlFor","charAt","toUpperCase","slice","type","id","onChange","input","required","submitButton","crop","_c","padding","maxWidth","margin","textAlign","display","flexDirection","marginBottom","fontWeight","width","marginTop","backgroundColor","color","border","cursor","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/Fisat/FARMOS/frontend/src/components/Assets/Signup/CropPrediction.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CropPrediction = () => {\r\n    const [formData, setFormData] = useState({\r\n        nitrogen: '',\r\n        phosphorus: '',\r\n        potassium: '',\r\n        temperature: '',\r\n        humidity: '',\r\n        ph: '',\r\n        rainfall: '',\r\n        location: '',\r\n    });\r\n\r\n    const [prediction, setPrediction] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log('Submitted Data:', formData);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (response.ok) {\r\n                setPrediction(result);\r\n                console.log('Prediction Result:', result);\r\n            } else {\r\n                setError(result.message || 'Error predicting crop');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            setError('Failed to fetch prediction');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h1 style={styles.header}>Crop Prediction</h1>\r\n            <form style={styles.form} onSubmit={handleSubmit}>\r\n                {Object.keys(formData).map((key) => (\r\n                    <div key={key} style={styles.inputGroup}>\r\n                        <label style={styles.label} htmlFor={key}>\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}:\r\n                        </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id={key}\r\n                            name={key}\r\n                            value={formData[key]}\r\n                            onChange={handleChange}\r\n                            style={styles.input}\r\n                            required\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\" style={styles.submitButton}>\r\n                    Predict Crop\r\n                </button>\r\n            </form>\r\n\r\n            {prediction && (\r\n                <div style={styles.result}>\r\n                    <h2>Predicted Crop:</h2>\r\n                    <p>{prediction.crop}</p>\r\n                </div>\r\n            )}\r\n\r\n            {error && (\r\n                <div style={styles.error}>\r\n                    <p>{error}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: { padding: '20px', maxWidth: '500px', margin: 'auto' },\r\n    header: { textAlign: 'center' },\r\n    form: { display: 'flex', flexDirection: 'column' },\r\n    inputGroup: { marginBottom: '10px' },\r\n    label: { fontWeight: 'bold' },\r\n    input: { width: '100%', padding: '8px', marginTop: '5px' },\r\n    submitButton: { padding: '10px', backgroundColor: '#28a745', color: '#fff', border: 'none', cursor: 'pointer' },\r\n    result: { marginTop: '20px', padding: '10px', backgroundColor: '#e3fcef', textAlign: 'center' },\r\n    error: { marginTop: '20px', padding: '10px', backgroundColor: '#f8d7da', textAlign: 'center', color: '#721c24' }\r\n};\r\n\r\nexport default CropPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}