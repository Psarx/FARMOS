{"ast":null,"code":"var _jsxFileName = \"E:\\\\Main Project\\\\FARMOS\\\\frontend\\\\src\\\\components\\\\Assets\\\\Signup\\\\DiseaseDetection.jsx\",\n  _s = $RefreshSig$();\n// import React from 'react';\n\n// const DiseaseDetection = () => {\n//     return (\n//         <div style={{ textAlign: 'center', padding: '20px' }}>\n//             <h1>Disease Detection</h1>\n//             <p>Here you can input data for disease detection.</p>\n//         </div>\n//     );\n// };\n\n// export default DiseaseDetection;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiseaseDetection = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      const fileType = selectedFile.type;\n      if (fileType === 'image/jpeg' || fileType === 'image/png' || fileType === 'application/pdf') {\n        setFile(selectedFile);\n      } else {\n        alert('Please upload a valid file (jpg, png, or pdf).');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Disease Detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Upload an image or PDF file for disease detection:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".jpg, .png, .pdf\",\n      onChange: handleFileChange,\n      style: {\n        margin: '20px 0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), file && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Selected:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), file.type.startsWith('image') && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(file),\n        alt: \"Preview\",\n        style: {\n          maxWidth: '300px',\n          marginTop: '20px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }, this), file.type === 'application/pdf' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"PDF file selected. You can process this file for disease detection.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(DiseaseDetection, \"Nkb8eHkBruGouXteoqeZ1R6wRVk=\");\n_c = DiseaseDetection;\nexport default DiseaseDetection;\nvar _c;\n$RefreshReg$(_c, \"DiseaseDetection\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DiseaseDetection","_s","file","setFile","handleFileChange","e","selectedFile","target","files","fileType","type","alert","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","margin","name","startsWith","src","URL","createObjectURL","alt","maxWidth","marginTop","_c","$RefreshReg$"],"sources":["E:/Main Project/FARMOS/frontend/src/components/Assets/Signup/DiseaseDetection.jsx"],"sourcesContent":["// import React from 'react';\r\n\r\n// const DiseaseDetection = () => {\r\n//     return (\r\n//         <div style={{ textAlign: 'center', padding: '20px' }}>\r\n//             <h1>Disease Detection</h1>\r\n//             <p>Here you can input data for disease detection.</p>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default DiseaseDetection;\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst DiseaseDetection = () => {\r\n    const [file, setFile] = useState(null);\r\n\r\n    const handleFileChange = (e) => {\r\n        const selectedFile = e.target.files[0];\r\n        \r\n        if (selectedFile) {\r\n            const fileType = selectedFile.type;\r\n            if (fileType === 'image/jpeg' || fileType === 'image/png' || fileType === 'application/pdf') {\r\n                setFile(selectedFile);\r\n            } else {\r\n                alert('Please upload a valid file (jpg, png, or pdf).');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', padding: '20px' }}>\r\n            <h1>Disease Detection</h1>\r\n            <p>Upload an image or PDF file for disease detection:</p>\r\n            \r\n            <input\r\n                type=\"file\"\r\n                accept=\".jpg, .png, .pdf\"\r\n                onChange={handleFileChange}\r\n                style={{ margin: '20px 0' }}\r\n            />\r\n            \r\n            {file && (\r\n                <div>\r\n                    <h3>File Selected:</h3>\r\n                    <p>{file.name}</p>\r\n                    {/* Preview for image files */}\r\n                    {file.type.startsWith('image') && (\r\n                        <img\r\n                            src={URL.createObjectURL(file)}\r\n                            alt=\"Preview\"\r\n                            style={{ maxWidth: '300px', marginTop: '20px' }}\r\n                        />\r\n                    )}\r\n                    {/* Message for PDF files */}\r\n                    {file.type === 'application/pdf' && (\r\n                        <p>PDF file selected. You can process this file for disease detection.</p>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DiseaseDetection;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMO,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,YAAY,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAEtC,IAAIF,YAAY,EAAE;MACd,MAAMG,QAAQ,GAAGH,YAAY,CAACI,IAAI;MAClC,IAAID,QAAQ,KAAK,YAAY,IAAIA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,iBAAiB,EAAE;QACzFN,OAAO,CAACG,YAAY,CAAC;MACzB,CAAC,MAAM;QACHK,KAAK,CAAC,gDAAgD,CAAC;MAC3D;IACJ;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAKa,KAAK,EAAE;MAAEC,SAAS,EAAE,QAAQ;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBACjDhB,OAAA;MAAAgB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BpB,OAAA;MAAAgB,QAAA,EAAG;IAAkD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAEzDpB,OAAA;MACIW,IAAI,EAAC,MAAM;MACXU,MAAM,EAAC,kBAAkB;MACzBC,QAAQ,EAAEjB,gBAAiB;MAC3BQ,KAAK,EAAE;QAAEU,MAAM,EAAE;MAAS;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC,EAEDjB,IAAI,iBACDH,OAAA;MAAAgB,QAAA,gBACIhB,OAAA;QAAAgB,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBpB,OAAA;QAAAgB,QAAA,EAAIb,IAAI,CAACqB;MAAI;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAEjBjB,IAAI,CAACQ,IAAI,CAACc,UAAU,CAAC,OAAO,CAAC,iBAC1BzB,OAAA;QACI0B,GAAG,EAAEC,GAAG,CAACC,eAAe,CAACzB,IAAI,CAAE;QAC/B0B,GAAG,EAAC,SAAS;QACbhB,KAAK,EAAE;UAAEiB,QAAQ,EAAE,OAAO;UAAEC,SAAS,EAAE;QAAO;MAAE;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnD,CACJ,EAEAjB,IAAI,CAACQ,IAAI,KAAK,iBAAiB,iBAC5BX,OAAA;QAAAgB,QAAA,EAAG;MAAmE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC5E;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAClB,EAAA,CAhDID,gBAAgB;AAAA+B,EAAA,GAAhB/B,gBAAgB;AAkDtB,eAAeA,gBAAgB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}