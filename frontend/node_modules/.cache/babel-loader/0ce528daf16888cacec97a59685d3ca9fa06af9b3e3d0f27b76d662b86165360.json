{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Fisat\\\\FARMOS\\\\frontend\\\\src\\\\components\\\\Assets\\\\Signup\\\\CropPrediction.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CropPrediction = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    N: '',\n    P: '',\n    K: '',\n    temperature: '',\n    humidity: '',\n    ph: '',\n    rainfall: ''\n  });\n  const [prediction, setPrediction] = useState(null);\n  const [error, setError] = useState(null);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setPrediction(null);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/api/auth/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          N: parseFloat(formData.N),\n          P: parseFloat(formData.P),\n          K: parseFloat(formData.K),\n          temperature: parseFloat(formData.temperature),\n          humidity: parseFloat(formData.humidity),\n          ph: parseFloat(formData.ph),\n          rainfall: parseFloat(formData.rainfall)\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setPrediction(data.predicted_crop);\n      } else {\n        setError(data.message || 'Error predicting crop');\n      }\n    } catch (err) {\n      setError('Failed to connect to the backend');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: styles.header,\n      children: \"Crop Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      style: styles.form,\n      onSubmit: handleSubmit,\n      children: [Object.keys(formData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: styles.label,\n          htmlFor: key,\n          children: [key.charAt(0).toUpperCase() + key.slice(1), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: key,\n          name: key,\n          value: formData[key],\n          onChange: handleChange,\n          style: styles.input,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        style: styles.submitButton,\n        children: \"Predict Crop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.result,\n      children: [\"Predicted Crop: \", prediction]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 28\n    }, this), error && /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(CropPrediction, \"NuMgeKA1vCvJJJjWcofJekrAeXA=\");\n_c = CropPrediction;\nconst styles = {\n  container: {\n    textAlign: 'center',\n    padding: '20px'\n  },\n  header: {\n    fontSize: '24px',\n    marginBottom: '20px'\n  },\n  form: {\n    display: 'inline-block',\n    textAlign: 'left'\n  },\n  inputGroup: {\n    marginBottom: '10px'\n  },\n  label: {\n    display: 'block',\n    fontWeight: 'bold'\n  },\n  input: {\n    width: '100%',\n    padding: '8px',\n    marginBottom: '5px'\n  },\n  submitButton: {\n    padding: '10px 20px',\n    fontSize: '16px',\n    cursor: 'pointer'\n  },\n  result: {\n    color: 'green',\n    marginTop: '20px'\n  },\n  error: {\n    color: 'red',\n    marginTop: '20px'\n  }\n};\nexport default CropPrediction;\nvar _c;\n$RefreshReg$(_c, \"CropPrediction\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CropPrediction","_s","formData","setFormData","N","P","K","temperature","humidity","ph","rainfall","prediction","setPrediction","error","setError","handleChange","e","target","name","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","parseFloat","data","json","ok","predicted_crop","message","err","style","styles","container","children","header","fileName","_jsxFileName","lineNumber","columnNumber","form","onSubmit","Object","keys","map","key","inputGroup","label","htmlFor","charAt","toUpperCase","slice","type","id","onChange","input","required","submitButton","result","_c","textAlign","padding","fontSize","marginBottom","display","fontWeight","width","cursor","color","marginTop","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/Fisat/FARMOS/frontend/src/components/Assets/Signup/CropPrediction.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CropPrediction = () => {\r\n    const [formData, setFormData] = useState({\r\n        N: '',\r\n        P: '',\r\n        K: '',\r\n        temperature: '',\r\n        humidity: '',\r\n        ph: '',\r\n        rainfall: '',\r\n    });\r\n\r\n    const [prediction, setPrediction] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleChange = (e) => {\r\n        setFormData({\r\n            ...formData,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setPrediction(null);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/auth/predict', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    N: parseFloat(formData.N),\r\n                    P: parseFloat(formData.P),\r\n                    K: parseFloat(formData.K),\r\n                    temperature: parseFloat(formData.temperature),\r\n                    humidity: parseFloat(formData.humidity),\r\n                    ph: parseFloat(formData.ph),\r\n                    rainfall: parseFloat(formData.rainfall),\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                setPrediction(data.predicted_crop);\r\n            } else {\r\n                setError(data.message || 'Error predicting crop');\r\n            }\r\n        } catch (err) {\r\n            setError('Failed to connect to the backend');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h1 style={styles.header}>Crop Prediction</h1>\r\n            <form style={styles.form} onSubmit={handleSubmit}>\r\n                {Object.keys(formData).map((key) => (\r\n                    <div key={key} style={styles.inputGroup}>\r\n                        <label style={styles.label} htmlFor={key}>\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}:\r\n                        </label>\r\n                        <input\r\n                            type=\"number\"\r\n                            id={key}\r\n                            name={key}\r\n                            value={formData[key]}\r\n                            onChange={handleChange}\r\n                            style={styles.input}\r\n                            required\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\" style={styles.submitButton}>\r\n                    Predict Crop\r\n                </button>\r\n            </form>\r\n\r\n            {prediction && <h2 style={styles.result}>Predicted Crop: {prediction}</h2>}\r\n            {error && <h2 style={styles.error}>{error}</h2>}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: { textAlign: 'center', padding: '20px' },\r\n    header: { fontSize: '24px', marginBottom: '20px' },\r\n    form: { display: 'inline-block', textAlign: 'left' },\r\n    inputGroup: { marginBottom: '10px' },\r\n    label: { display: 'block', fontWeight: 'bold' },\r\n    input: { width: '100%', padding: '8px', marginBottom: '5px' },\r\n    submitButton: { padding: '10px 20px', fontSize: '16px', cursor: 'pointer' },\r\n    result: { color: 'green', marginTop: '20px' },\r\n    error: { color: 'red', marginTop: '20px' },\r\n};\r\n\r\nexport default CropPrediction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}